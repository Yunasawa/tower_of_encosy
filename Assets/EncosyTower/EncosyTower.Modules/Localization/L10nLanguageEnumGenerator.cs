#if UNITY_LOCALIZATION && ANNULUS_CODEGEN

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;
using EncosyTower.Modules.CodeGen;
using EncosyTower.Modules.Localization;
using UnityCodeGen;
using UnityEditor;
using UnityEngine.Localization;

namespace EncosyTower.Modules.Editor.Localization
{
    [Generator]
    internal class L10nLanguageEnumGenerator : ICodeGenerator
    {
        public void Execute([NotNull] GeneratorContext context)
        {
            context.OverrideFolderPath("Assets");

            var types = UnityEditor.TypeCache.GetTypesWithAttribute<L10nLanguageEnumTemplateAttribute>()
                .Where(ValidateType)
                .ToArray();

            if (types.Length < 1)
            {
                return;
            }

            var guids = AssetDatabase.FindAssets($"t:global::{typeof(Locale).FullName}");
            var locales = new List<LocaleInfo>(guids.Length);

            foreach (var guid in guids)
            {
                var path = AssetDatabase.GUIDToAssetPath(guid);
                var asset = AssetDatabase.LoadAssetAtPath<Locale>(path);

                if (asset == false)
                {
                    continue;
                }

                var language = asset.Identifier.CultureInfo.EnglishName;

                if (string.Equals(language, "English", StringComparison.Ordinal))
                {
                    continue;
                }

                locales.Add(new LocaleInfo {
                    language = language.Replace(" (", "_").Replace(")", ""),
                    locale = asset.Identifier.Code,
                });
            }

            locales.Sort();

            foreach (var type in types)
            {
                if (CodeGenAPI.TryGetOutputFolderPath(type, out var path, rootIsAssets: true) == false
                    && CodeGenAPI.TryGetOutputFolderPath(type.Name, out path, rootIsAssets: true) == false
                )
                {
                    continue;
                }

                var typeName = type.Name;
                typeName = typeName.Replace("_EnumTemplate", "").Replace("_Template", "").Replace("_Enum", "");

                context.AddCode(Path.Combine(path, $"{typeName}.gen.cs"), WriteCode(type, typeName, locales));
            }
        }

        private static bool ValidateType(Type type)
        {
            if (type.IsValueType == false)
            {
                return false;
            }

            if (type.Name.EndsWith("_EnumTemplate", StringComparison.Ordinal)
                || type.Name.EndsWith("_Template", StringComparison.Ordinal)
                || type.Name.EndsWith("_Enum", StringComparison.Ordinal)
            )
            {
                return true;
            }

            return false;
        }

        private static string WriteCode(Type type, string typeName, List<LocaleInfo> locales)
        {
            var p = Printer.DefaultLarge;
            p.PrintAutoGeneratedBlock(nameof(L10nLanguageEnumGenerator));
            p.PrintEndLine();

            p.PrintLine(@"#pragma warning disable

using System;
using System.Runtime.CompilerServices;
using EncosyTower.Modules;
using EncosyTower.Modules.EnumExtensions;
using EncosyTower.Modules.Localization;
");

            p.PrintBeginLine("namespace ").PrintEndLine(type.Namespace);
            p.OpenScope();
            {
                WriteTemplate(ref p, type, typeName, locales);
                WriteEnum(ref p, typeName, locales);
                WritePartialClass(ref p, type, typeName, locales);
            }
            p.CloseScope();
            p.PrintEndLine();

            return p.Result;
        }

        private static void WriteTemplate(ref Printer p, Type type, string typeName, List<LocaleInfo> locales)
        {
            p.PrintBeginLine("partial struct ").Print(type.Name)
                .Print(" : IEnumTemplate<").Print(typeName).PrintEndLine(">");
            p.OpenScope();
            {
                WriteAttribute(ref p, typeName, "English", "L10nLanguage.DEFAULT_LOCALE_CODE");
                p.PrintBeginLine("public static readonly L10nLanguage<").Print(typeName)
                    .Print("> English = new((ushort)").Print(typeName)
                    .PrintEndLine(".English, L10nLanguage.DEFAULT_LOCALE_CODE);");
                p.PrintEndLine();

                foreach (var info in locales)
                {
                    var language = info.language;
                    var locale = info.locale;

                    WriteAttribute(ref p, typeName, language, $"\"{locale}\"");
                    p.PrintBeginLine("public static readonly L10nLanguage<").Print(typeName)
                        .Print("> ").Print(language).Print(" = new((ushort)").Print(typeName).Print(".")
                        .Print(language).Print(", \"").Print(locale).PrintEndLine("\");");
                    p.PrintEndLine();
                }

                p.PrintEndLine();

                p.PrintLine("private static readonly L10nLanguage[] s_untypedLanguages = new L10nLanguage[] {");
                p = p.IncreasedIndent();
                {
                    p.PrintLine("English,");

                    foreach (var info in locales)
                    {
                        p.PrintBeginLine(info.language).PrintEndLine(",");
                    }
                }
                p = p.DecreasedIndent();
                p.PrintLine("};");
                p.PrintEndLine();

                p.PrintBeginLine("private static readonly L10nLanguage<").Print(typeName)
                    .PrintEndLine(">[] s_typedLanguages = new[] {");
                p = p.IncreasedIndent();
                {
                    p.PrintLine("English,");

                    foreach (var info in locales)
                    {
                        p.PrintBeginLine(info.language).PrintEndLine(",");
                    }
                }
                p = p.DecreasedIndent();
                p.PrintLine("};");
                p.PrintEndLine();

                p.PrintLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
                p.PrintLine("public static ReadOnlyMemory<L10nLanguage> GetUntypedLanguages() => s_untypedLanguages;");
                p.PrintEndLine();

                p.PrintLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
                p.PrintBeginLine("public static ReadOnlyMemory<L10nLanguage<").Print(typeName)
                    .PrintEndLine(">> GetTypedLanguages() => s_typedLanguages;");
                p.PrintEndLine();
            }
            p.CloseScope();
            p.PrintEndLine();
        }

        private static void WriteAttribute(ref Printer p, string typeName, string language, string codeWithQuotes)
        {
            p.PrintBeginLine("[L10nLanguage(typeof(").Print(typeName).Print("), (ushort)")
                .Print(typeName).Print(".").Print(language).Print(", nameof(")
                .Print(typeName).Print(".").Print(language).Print("), ")
                .Print(codeWithQuotes).PrintEndLine(")]");
        }

        private static void WriteEnum(ref Printer p, string typeName, List<LocaleInfo> locales)
        {
            p.PrintLine("[EnumExtensions]");
            p.PrintBeginLine("public enum ").Print(typeName).PrintEndLine(" : ushort");
            p.OpenScope();
            {
                p.PrintLine("English = 0,");

                foreach (var info in locales)
                {
                    p.PrintLine($"{info.language},");
                }
            }
            p.CloseScope();
            p.PrintEndLine();
        }

        private static void WritePartialClass(ref Printer p, Type type, string typeName, List<LocaleInfo> locales)
        {
            p.PrintBeginLine("public static partial class ").Print(typeName).PrintEndLine("Extensions");
            p.OpenScope();
            {
                WriteToLocaleCode(ref p, type, typeName, locales);
            }
            p.CloseScope();
            p.PrintEndLine();
        }

        private static void WriteToLocaleCode(ref Printer p, Type type, string typeName, List<LocaleInfo> locales)
        {
            p.PrintBeginLine("public static L10nLanguage<").Print(typeName)
                .Print("> ToL10nLanguage(this ").Print(typeName).PrintEndLine(" value)");
            p.OpenScope();
            {
                p.PrintLine("return value switch");
                p.OpenScope();
                {
                    foreach (var info in locales)
                    {
                        p.PrintBeginLine(typeName).Print(".").Print(info.language)
                            .Print(" => ").Print(type.Name).Print(".").Print(info.language).PrintEndLine(",");
                    }

                    p.PrintBeginLine("_ => ").Print(type.Name).PrintEndLine(".English,");
                }
                p.CloseScope("};");
            }
            p.CloseScope();
            p.PrintEndLine();
        }

        private struct LocaleInfo : IComparable<LocaleInfo>, IComparer<LocaleInfo>
        {
            public string language;
            public string locale;

            public int CompareTo(LocaleInfo other)
                => Compare(this, other);

            public int Compare(LocaleInfo x, LocaleInfo y)
            {
                if (string.IsNullOrEmpty(x.locale) && string.IsNullOrEmpty(y.locale))
                {
                    return 0;
                }

                if (string.IsNullOrEmpty(x.locale))
                {
                    return -1;
                }

                if (string.IsNullOrEmpty(y.locale))
                {
                    return 1;
                }

                var charX = x.locale[0];
                var charY = y.locale[0];
                return charX.CompareTo(charY);
            }
        }
    }
}

#endif
