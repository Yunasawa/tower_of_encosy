#if UNITY_EDITOR && ANNULUS_CODEGEN && ENCOSY_UNIONS_GENERATOR

using System.Diagnostics.CodeAnalysis;
using EncosyTower.Modules.CodeGen;
using UnityCodeGen;

namespace EncosyTower.Modules.Editor.Unions
{
    [Generator]
    internal class UnionDataGenerator : ICodeGenerator
    {
        private const uint SIZE_ULONG = 8;
        private const uint MAX_COUNT = 512;
        private const uint DEFAULT_SIZE = SIZE_ULONG * 2;
        private const uint MAX_SIZE = SIZE_ULONG * MAX_COUNT;

        public void Execute([NotNull] GeneratorContext context)
        {
            if (CodeGenAPI.TryGetOutputFolderPath(nameof(UnionDataGenerator), out var outputPath) == false)
            {
                context.OverrideFolderPath("Assets");
                return;
            }

            var p = Printer.DefaultLarge;
            p.PrintAutoGeneratedBlock(GetType().Name);
            p.PrintEndLine();
            p.PrintLine("#pragma warning disable");
            p.PrintEndLine();
            p.Print($"// For practical reason, UnionData should be {DEFAULT_SIZE} bytes by default.").PrintEndLine();
            p.Print($"#define UNION_SIZE_{DEFAULT_SIZE}_BYTES").PrintEndLine();
            p.PrintEndLine();

            p.PrintLine(@"using System.Runtime.InteropServices;");
            p.PrintEndLine();

            p.PrintLine("namespace EncosyTower.Modules.Unions");
            p.OpenScope();
            {
                p.PrintLine("/// <summary>");
                p.PrintLine("/// Represents a memory layout that can store the actual data of several types.");
                p.PrintLine($"/// The data size can be between {DEFAULT_SIZE} and {MAX_SIZE} bytes.");
                p.PrintLine("/// </summary>");
                p.PrintLine("/// <remarks>");
                p.PrintLine($"/// For practical reason, the default size is {DEFAULT_SIZE} bytes.");
                p.PrintLine("/// <br />");
                p.PrintLine("/// <br />");
                p.PrintLine("/// To resize, define one of the following symbols:");
                p.PrintLine("/// <list type=\"bullet\">");
                p.PrintLine($"/// <item><c>UNION_SIZE_{DEFAULT_SIZE + SIZE_ULONG * 0}_BYTES</c> = {2} × <see cref=\"long\"/>, or {2 * 2} × <see cref=\"int\"/></item>");
                p.PrintLine($"/// <item><c>UNION_SIZE_{DEFAULT_SIZE + SIZE_ULONG * 1}_BYTES</c> = {3} × <see cref=\"long\"/>, or {3 * 2} × <see cref=\"int\"/></item>");
                p.PrintLine($"/// <item><c>UNION_SIZE_{DEFAULT_SIZE + SIZE_ULONG * 2}_BYTES</c> = {4} × <see cref=\"long\"/>, or {4 * 2} × <see cref=\"int\"/></item>");
                p.PrintLine($"/// <item><c>UNION_SIZE_{DEFAULT_SIZE + SIZE_ULONG * 3}_BYTES</c> = {5} × <see cref=\"long\"/>, or {5 * 2} × <see cref=\"int\"/></item>");
                p.PrintLine("/// <item><c>...</c></item>");
                p.PrintLine($"/// <item><c>UNION_SIZE_{MAX_SIZE - SIZE_ULONG * 2}_BYTES</c> = {MAX_COUNT - 2} × <see cref=\"long\"/>, or {(MAX_COUNT - 2) * 2} × <see cref=\"int\"/></item>");
                p.PrintLine($"/// <item><c>UNION_SIZE_{MAX_SIZE - SIZE_ULONG * 1}_BYTES</c> = {MAX_COUNT - 1} × <see cref=\"long\"/>, or {(MAX_COUNT - 1) * 2} × <see cref=\"int\"/></item>");
                p.PrintLine($"/// <item><c>UNION_SIZE_{MAX_SIZE                 }_BYTES</c> = {MAX_COUNT    } × <see cref=\"long\"/>, or {(MAX_COUNT    ) * 2} × <see cref=\"int\"/></item>");
                p.PrintLine("/// </list>");
                p.PrintLine("/// </remarks>");
                p.PrintLine("[StructLayout(LayoutKind.Sequential, Size = UnionData.SIZE)]");
                p.PrintLine("public readonly struct UnionData");
                p.OpenScope();
                {
                    p.Print($"#if UNION_SIZE_{MAX_SIZE}_BYTES").PrintEndLine();

                    for (var size = MAX_SIZE; size >= SIZE_ULONG; size -= SIZE_ULONG)
                    {
                        var count = size / SIZE_ULONG;

                        p.PrintEndLine();
                        p.PrintLine("/// <summary>");
                        p.PrintLine($"/// Equals to {count} × <see cref=\"long\"/>, or {count * 2} × <see cref=\"int\"/>");
                        p.PrintLine("/// </summary>");
                        p.PrintLine($"public const int SIZE = {SIZE_ULONG} * {count};");
                        p.PrintEndLine();

                        var nextSize = size - SIZE_ULONG;

                        if (nextSize < SIZE_ULONG)
                        {
                            break;
                        }

                        p.PrintSelect(
                              $"#else"
                            , $"#elif UNION_SIZE_{nextSize}_BYTES"
                            , nextSize == SIZE_ULONG
                        ).PrintEndLine();
                    }

                    p.Print("#endif").PrintEndLine();
                }
                p.CloseScope();
            }
            p.CloseScope();
            p.PrintEndLine();

            context.OverrideFolderPath(outputPath);
            context.AddCode($"UnionData.gen.cs", p.Result);
        }
    }
}

#endif
